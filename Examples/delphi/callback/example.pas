(* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- *)

unit example;


{$define example_FUNCTION_WRAPPER}


{$define example_CLASS_WRAPPER}

interface



//type PDouble = ^double;


	type  
		Pdouble=^double;
		doubleArray = array[0..(MaxInt div sizeof(double))-1] of double;
		PdoubleArray = ^doubleArray;



	type  
		Pcardinal=^cardinal;
		cardinalArray = array[0..(MaxInt div sizeof(cardinal))-1] of cardinal;
		PcardinalArray = ^cardinalArray;



	type  
		CFILE=type Pointer;
		CFILEArray = array[0..(MaxInt div sizeof(CFILE))-1] of CFILE;
		PCFILEArray = ^CFILEArray;


type

Callback = type pointer;
PCallbackArray = ^CallbackArray_;
CallbackArray_=array[0..(MaxInt div sizeof(Callback))-1] of Callback;

type

Caller = type pointer;
PCallerArray = ^CallerArray_;
CallerArray_=array[0..(MaxInt div sizeof(Caller))-1] of Caller;

type
	Psize_t = ^Cardinal;


procedure Delete_Callback ( self: Callback); stdcall;

procedure Callback_run ( self: Callback); stdcall;

function New_Callback (): Callback; stdcall;

function New_Caller (): Caller; stdcall;

procedure Delete_Caller ( self: Caller); stdcall;

procedure Caller_delCallback ( self: Caller); stdcall;

procedure Caller_setCallback ( self: Caller;
 cb: Callback); stdcall;

procedure Caller_resetCallback ( self: Caller); stdcall;

procedure Caller_call ( self: Caller); stdcall;

{$ifdef example_CLASS_WRAPPER}

type

  TCallback = class (TObject, IUnknown)

  private
    FCObjPtr : Callback;
    FOwnCObjPtr : boolean;

  protected
	procedure SetCObjPtr(Value : Callback);
  // IUnknown
    function _AddRef : integer; stdcall;
    function _Release: integer; stdcall;
    function QueryInterface(const GUID:TGUID; out Intf): HRESULT; stdcall;
 public

    procedure run ();virtual; 

    constructor Create ();overload; 

    destructor Destroy; override;
  
  public  
    property CObjPtr : Callback read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;

  end;


  TCaller = class (TObject, IUnknown)

  private
    FCObjPtr : Caller;
    FOwnCObjPtr : boolean;

  protected
	procedure SetCObjPtr(Value : Caller);
  // IUnknown
    function _AddRef : integer; stdcall;
    function _Release: integer; stdcall;
    function QueryInterface(const GUID:TGUID; out Intf): HRESULT; stdcall;
 public

    constructor Create ();overload; 

    procedure delCallback ();

    procedure setCallback ( cb: TCallback);

    procedure resetCallback ();

    procedure call ();

    destructor Destroy; override;
  
  public  
    property CObjPtr : Caller read FCObjPtr write SetCObjPtr;
    property OwnCObjPtr : boolean read FOwnCObjPtr  write FOwnCObjPtr ;

  end;


{$endif} //example_CLASS_WRAPPER

{$ifdef example_FUNCTION_WRAPPER}

// Functions Wrapper 


{$endif} //example_FUNCTION_WRAPPER

implementation


const __DLLNAME= 'example.dll';


const __WRAPDLLNAME= 'example.dll';


procedure Delete_Callback ( self: Callback); stdcall; external __DLLNAME name 'Delphi_delete_Callback';

procedure Callback_run ( self: Callback); stdcall; external __DLLNAME name 'Delphi_Callback_run';

function New_Callback (): Callback; stdcall; external __DLLNAME name 'Delphi_new_Callback';

function New_Caller (): Caller; stdcall; external __DLLNAME name 'Delphi_new_Caller';

procedure Delete_Caller ( self: Caller); stdcall; external __DLLNAME name 'Delphi_delete_Caller';

procedure Caller_delCallback ( self: Caller); stdcall; external __DLLNAME name 'Delphi_Caller_delCallback';

procedure Caller_setCallback ( self: Caller;
 cb: Callback); stdcall; external __DLLNAME name 'Delphi_Caller_setCallback';

procedure Caller_resetCallback ( self: Caller); stdcall; external __DLLNAME name 'Delphi_Caller_resetCallback';

procedure Caller_call ( self: Caller); stdcall; external __DLLNAME name 'Delphi_Caller_call';

{$ifdef example_FUNCTION_WRAPPER}

// Functions Wrapper 


{$endif} //example_FUNCTION_WRAPPER

{$ifdef example_CLASS_WRAPPER}

procedure TCallback.run ();

begin

  assert(FCObjPtr <> nil);
 example.Callback_run(Self.FCObjPtr);

end;

constructor TCallback.Create ();

begin

  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_Callback();

end;


function TCallback._AddRef : integer;
begin
   Result := -1;
end;

function TCallback._Release: integer;
begin
   Result := -1;
end;

function TCallback.QueryInterface(const GUID:TGUID; out Intf): HRESULT;
begin
   if GetInterface(GUID, Intf) then
      Result := S_OK
   else
      Result := S_FALSE	;
end; 
 
destructor TCallback.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Callback(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TCallback.SetCObjPtr(Value : Callback);
begin
 
  if (Value <> FCObjPtr) then begin
	if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
		example.delete_Callback(FCObjPtr);
	end;
	FCObjPtr := Value;
  
  
  end;

end;


constructor TCaller.Create ();

begin

  inherited Create;
  FOwnCObjPtr := true;
   FCObjPtr := example.New_Caller();

end;

procedure TCaller.delCallback ();

begin

  assert(FCObjPtr <> nil);
 example.Caller_delCallback(Self.FCObjPtr);

end;

procedure TCaller.setCallback ( cb: TCallback);


begin

  assert(FCObjPtr <> nil);
 example.Caller_setCallback(Self.FCObjPtr, cb.CObjPtr);


end;

procedure TCaller.resetCallback ();

begin

  assert(FCObjPtr <> nil);
 example.Caller_resetCallback(Self.FCObjPtr);

end;

procedure TCaller.call ();

begin

  assert(FCObjPtr <> nil);
 example.Caller_call(Self.FCObjPtr);

end;


function TCaller._AddRef : integer;
begin
   Result := -1;
end;

function TCaller._Release: integer;
begin
   Result := -1;
end;

function TCaller.QueryInterface(const GUID:TGUID; out Intf): HRESULT;
begin
   if GetInterface(GUID, Intf) then
      Result := S_OK
   else
      Result := S_FALSE	;
end; 
 
destructor TCaller.Destroy; 
begin   
  if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
    example.delete_Caller(FCObjPtr);
    FOwnCObjPtr := false;
  end;
  FCObjPtr := nil; 
  inherited Destroy;
end;

procedure TCaller.SetCObjPtr(Value : Caller);
begin
 
  if (Value <> FCObjPtr) then begin
	if (FCObjPtr <> nil) and  FOwnCObjPtr then begin 
		example.delete_Caller(FCObjPtr);
	end;
	FCObjPtr := Value;
  
  
  end;

end;


{$endif} //example_CLASS_WRAPPER

initialization



// constant initialization



//initialization


finalization


//finalization


end.
